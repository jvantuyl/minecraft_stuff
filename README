This is just how I did it.  Here's the quick and dirty.

# system needs
apt-get install ant build-essential default-jdk gdb git-core libfreetype6-dev libjpeg-dev liblcms-dev libpng-dev nginx ntp ntpdate python-dev python-virtualenv rsync screen strace tk-dev vim

# get server jar, put somewhere, set up cronjob as such
@reboot path_to_server/minecraft_server
# runs server in a screen

# without mapping

Make a directory, make some directories in the following structure:

<base>/bin
<base>/var/lib/<config_name>
<base>/var/backup/<config_name>
<base>/var/www/<config_name>

Put the contents of this repository in bin and a standard layout for minecraft
in each config directory (for each server instance you want to run).

You can now start a server instance with "bin/startup <config_name>".  This
will start a server, a periodic backup, and a mapper. The map will be generated
into the www directory, where you can also put things like downloads for your
modpack, etc.

NOTE: I also manage multiple servers with the same modpacks, so I have a lib
directory that I use to symlink common things into var/lib.  There's no
automation to support this, though, so it's mostly just a suggestion.

# for mapping

# python needs for map builder
Make a virtualenv.
pip install NBT
pip install numpy
pip install PIL

# map builder sources
git clone git://github.com/brownan/Minecraft-Overviewer.git
# you'll need to do a 'python ./setup.py build' to get it working

git clone git://github.com/overviewer/minecraft-biome-extractor.git

For Biome coloring in maps, get Minecraft Client Jar, put in ~/.minecraft/bin
and build biome extractor jar.

# for biome extractor, you'll need to force the build number
echo 1 > build.number
ant
# copy jar file to appropriate place

# use nginx-site config to have Nginx server your map on port 80

Use this virtualenv as the base directory, as above.
